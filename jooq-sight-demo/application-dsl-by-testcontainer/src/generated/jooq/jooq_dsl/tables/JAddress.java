/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooq.jooq_dsl.Indexes;
import jooq.jooq_dsl.JSakila;
import jooq.jooq_dsl.Keys;
import jooq.jooq_dsl.tables.records.JAddressRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JAddress extends TableImpl<JAddressRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sakila.address</code>
     */
    public static final JAddress ADDRESS = new JAddress();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JAddressRecord> getRecordType() {
        return JAddressRecord.class;
    }

    /**
     * The column <code>sakila.address.address_id</code>.
     */
    public final TableField<JAddressRecord, Integer> ADDRESS_ID = createField(DSL.name("address_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>sakila.address.address</code>.
     */
    public final TableField<JAddressRecord, String> ADDRESS_ = createField(DSL.name("address"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>sakila.address.address2</code>.
     */
    public final TableField<JAddressRecord, String> ADDRESS2 = createField(DSL.name("address2"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>sakila.address.district</code>.
     */
    public final TableField<JAddressRecord, String> DISTRICT = createField(DSL.name("district"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>sakila.address.city_id</code>.
     */
    public final TableField<JAddressRecord, Integer> CITY_ID = createField(DSL.name("city_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sakila.address.postal_code</code>.
     */
    public final TableField<JAddressRecord, String> POSTAL_CODE = createField(DSL.name("postal_code"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>sakila.address.phone</code>.
     */
    public final TableField<JAddressRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>sakila.address.last_update</code>.
     */
    public final TableField<JAddressRecord, LocalDateTime> LAST_UPDATE = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private JAddress(Name alias, Table<JAddressRecord> aliased) {
        this(alias, aliased, null);
    }

    private JAddress(Name alias, Table<JAddressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>sakila.address</code> table reference
     */
    public JAddress(String alias) {
        this(DSL.name(alias), ADDRESS);
    }

    /**
     * Create an aliased <code>sakila.address</code> table reference
     */
    public JAddress(Name alias) {
        this(alias, ADDRESS);
    }

    /**
     * Create a <code>sakila.address</code> table reference
     */
    public JAddress() {
        this(DSL.name("address"), null);
    }

    public <O extends Record> JAddress(Table<O> child, ForeignKey<O, JAddressRecord> key) {
        super(child, key, ADDRESS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JSakila.SAKILA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.ADDRESS_IDX_FK_CITY_ID);
    }

    @Override
    public Identity<JAddressRecord, Integer> getIdentity() {
        return (Identity<JAddressRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<JAddressRecord> getPrimaryKey() {
        return Keys.KEY_ADDRESS_PRIMARY;
    }

    @Override
    public List<ForeignKey<JAddressRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_ADDRESS_CITY);
    }

    private transient JCity _city;

    /**
     * Get the implicit join path to the <code>sakila.city</code> table.
     */
    public JCity city() {
        if (_city == null)
            _city = new JCity(this, Keys.FK_ADDRESS_CITY);

        return _city;
    }

    @Override
    public JAddress as(String alias) {
        return new JAddress(DSL.name(alias), this);
    }

    @Override
    public JAddress as(Name alias) {
        return new JAddress(alias, this);
    }

    @Override
    public JAddress as(Table<?> alias) {
        return new JAddress(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JAddress rename(String name) {
        return new JAddress(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JAddress rename(Name name) {
        return new JAddress(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JAddress rename(Table<?> name) {
        return new JAddress(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, Integer, String, String, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Integer, ? super String, ? super String, ? super String, ? super Integer, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Integer, ? super String, ? super String, ? super String, ? super Integer, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
