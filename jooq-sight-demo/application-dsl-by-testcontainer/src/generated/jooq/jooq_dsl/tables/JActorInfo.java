/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables;


import java.util.function.Function;

import jooq.jooq_dsl.JSakila;
import jooq.jooq_dsl.tables.records.JActorInfoRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JActorInfo extends TableImpl<JActorInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sakila.actor_info</code>
     */
    public static final JActorInfo ACTOR_INFO = new JActorInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JActorInfoRecord> getRecordType() {
        return JActorInfoRecord.class;
    }

    /**
     * The column <code>sakila.actor_info.actor_id</code>.
     */
    public final TableField<JActorInfoRecord, Integer> ACTOR_ID = createField(DSL.name("actor_id"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>sakila.actor_info.first_name</code>.
     */
    public final TableField<JActorInfoRecord, String> FIRST_NAME = createField(DSL.name("first_name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>sakila.actor_info.last_name</code>.
     */
    public final TableField<JActorInfoRecord, String> LAST_NAME = createField(DSL.name("last_name"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>sakila.actor_info.film_info</code>.
     */
    public final TableField<JActorInfoRecord, String> FILM_INFO = createField(DSL.name("film_info"), SQLDataType.CLOB, this, "");

    private JActorInfo(Name alias, Table<JActorInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private JActorInfo(Name alias, Table<JActorInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `actor_info` as select `a`.`actor_id` AS `actor_id`,`a`.`first_name` AS `first_name`,`a`.`last_name` AS `last_name`,group_concat(distinct concat(`c`.`name`,': ',(select group_concat(`f`.`title` order by `f`.`title` ASC separator ', ') from ((`sakila`.`film` `f` join `sakila`.`film_category` `fc` on((`f`.`film_id` = `fc`.`film_id`))) join `sakila`.`film_actor` `fa` on((`f`.`film_id` = `fa`.`film_id`))) where ((`fc`.`category_id` = `c`.`category_id`) and (`fa`.`actor_id` = `a`.`actor_id`)))) order by `c`.`name` ASC separator '; ') AS `film_info` from (((`sakila`.`actor` `a` left join `sakila`.`film_actor` `fa` on((`a`.`actor_id` = `fa`.`actor_id`))) left join `sakila`.`film_category` `fc` on((`fa`.`film_id` = `fc`.`film_id`))) left join `sakila`.`category` `c` on((`fc`.`category_id` = `c`.`category_id`))) group by `a`.`actor_id`,`a`.`first_name`,`a`.`last_name`"));
    }

    /**
     * Create an aliased <code>sakila.actor_info</code> table reference
     */
    public JActorInfo(String alias) {
        this(DSL.name(alias), ACTOR_INFO);
    }

    /**
     * Create an aliased <code>sakila.actor_info</code> table reference
     */
    public JActorInfo(Name alias) {
        this(alias, ACTOR_INFO);
    }

    /**
     * Create a <code>sakila.actor_info</code> table reference
     */
    public JActorInfo() {
        this(DSL.name("actor_info"), null);
    }

    public <O extends Record> JActorInfo(Table<O> child, ForeignKey<O, JActorInfoRecord> key) {
        super(child, key, ACTOR_INFO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JSakila.SAKILA;
    }

    @Override
    public JActorInfo as(String alias) {
        return new JActorInfo(DSL.name(alias), this);
    }

    @Override
    public JActorInfo as(Name alias) {
        return new JActorInfo(alias, this);
    }

    @Override
    public JActorInfo as(Table<?> alias) {
        return new JActorInfo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JActorInfo rename(String name) {
        return new JActorInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JActorInfo rename(Name name) {
        return new JActorInfo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JActorInfo rename(Table<?> name) {
        return new JActorInfo(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
