/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.time.Year;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooq.jooq_dsl.Indexes;
import jooq.jooq_dsl.JSakila;
import jooq.jooq_dsl.Keys;
import jooq.jooq_dsl.enums.FilmRating;
import jooq.jooq_dsl.tables.records.JFilmRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function13;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JFilm extends TableImpl<JFilmRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sakila.film</code>
     */
    public static final JFilm FILM = new JFilm();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JFilmRecord> getRecordType() {
        return JFilmRecord.class;
    }

    /**
     * The column <code>sakila.film.film_id</code>.
     */
    public final TableField<JFilmRecord, Integer> FILM_ID = createField(DSL.name("film_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>sakila.film.title</code>.
     */
    public final TableField<JFilmRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>sakila.film.description</code>.
     */
    public final TableField<JFilmRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>sakila.film.release_year</code>.
     */
    public final TableField<JFilmRecord, Year> RELEASE_YEAR = createField(DSL.name("release_year"), SQLDataType.YEAR, this, "");

    /**
     * The column <code>sakila.film.language_id</code>.
     */
    public final TableField<JFilmRecord, Integer> LANGUAGE_ID = createField(DSL.name("language_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>sakila.film.original_language_id</code>.
     */
    public final TableField<JFilmRecord, Integer> ORIGINAL_LANGUAGE_ID = createField(DSL.name("original_language_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>sakila.film.rental_duration</code>.
     */
    public final TableField<JFilmRecord, Byte> RENTAL_DURATION = createField(DSL.name("rental_duration"), SQLDataType.TINYINT.nullable(false).defaultValue(DSL.inline("3", SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>sakila.film.rental_rate</code>.
     */
    public final TableField<JFilmRecord, BigDecimal> RENTAL_RATE = createField(DSL.name("rental_rate"), SQLDataType.DECIMAL(4, 2).nullable(false).defaultValue(DSL.inline("4.99", SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>sakila.film.length</code>.
     */
    public final TableField<JFilmRecord, Short> LENGTH = createField(DSL.name("length"), SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>sakila.film.replacement_cost</code>.
     */
    public final TableField<JFilmRecord, BigDecimal> REPLACEMENT_COST = createField(DSL.name("replacement_cost"), SQLDataType.DECIMAL(5, 2).nullable(false).defaultValue(DSL.inline("19.99", SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>sakila.film.rating</code>.
     */
    public final TableField<JFilmRecord, FilmRating> RATING = createField(DSL.name("rating"), SQLDataType.VARCHAR(5).defaultValue(DSL.inline("G", SQLDataType.VARCHAR)).asEnumDataType(jooq.jooq_dsl.enums.FilmRating.class), this, "");

    /**
     * The column <code>sakila.film.special_features</code>.
     */
    public final TableField<JFilmRecord, String> SPECIAL_FEATURES = createField(DSL.name("special_features"), SQLDataType.VARCHAR(54), this, "");

    /**
     * The column <code>sakila.film.last_update</code>.
     */
    public final TableField<JFilmRecord, LocalDateTime> LAST_UPDATE = createField(DSL.name("last_update"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private JFilm(Name alias, Table<JFilmRecord> aliased) {
        this(alias, aliased, null);
    }

    private JFilm(Name alias, Table<JFilmRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>sakila.film</code> table reference
     */
    public JFilm(String alias) {
        this(DSL.name(alias), FILM);
    }

    /**
     * Create an aliased <code>sakila.film</code> table reference
     */
    public JFilm(Name alias) {
        this(alias, FILM);
    }

    /**
     * Create a <code>sakila.film</code> table reference
     */
    public JFilm() {
        this(DSL.name("film"), null);
    }

    public <O extends Record> JFilm(Table<O> child, ForeignKey<O, JFilmRecord> key) {
        super(child, key, FILM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JSakila.SAKILA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.FILM_IDX_FK_LANGUAGE_ID, Indexes.FILM_IDX_FK_ORIGINAL_LANGUAGE_ID, Indexes.FILM_IDX_TITLE);
    }

    @Override
    public Identity<JFilmRecord, Integer> getIdentity() {
        return (Identity<JFilmRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<JFilmRecord> getPrimaryKey() {
        return Keys.KEY_FILM_PRIMARY;
    }

    @Override
    public List<ForeignKey<JFilmRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_FILM_LANGUAGE, Keys.FK_FILM_LANGUAGE_ORIGINAL);
    }

    private transient JLanguage _fkFilmLanguage;
    private transient JLanguage _fkFilmLanguageOriginal;

    /**
     * Get the implicit join path to the <code>sakila.language</code> table, via
     * the <code>fk_film_language</code> key.
     */
    public JLanguage fkFilmLanguage() {
        if (_fkFilmLanguage == null)
            _fkFilmLanguage = new JLanguage(this, Keys.FK_FILM_LANGUAGE);

        return _fkFilmLanguage;
    }

    /**
     * Get the implicit join path to the <code>sakila.language</code> table, via
     * the <code>fk_film_language_original</code> key.
     */
    public JLanguage fkFilmLanguageOriginal() {
        if (_fkFilmLanguageOriginal == null)
            _fkFilmLanguageOriginal = new JLanguage(this, Keys.FK_FILM_LANGUAGE_ORIGINAL);

        return _fkFilmLanguageOriginal;
    }

    @Override
    public JFilm as(String alias) {
        return new JFilm(DSL.name(alias), this);
    }

    @Override
    public JFilm as(Name alias) {
        return new JFilm(alias, this);
    }

    @Override
    public JFilm as(Table<?> alias) {
        return new JFilm(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JFilm rename(String name) {
        return new JFilm(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JFilm rename(Name name) {
        return new JFilm(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JFilm rename(Table<?> name) {
        return new JFilm(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, String, String, Year, Integer, Integer, Byte, BigDecimal, Short, BigDecimal, FilmRating, String, LocalDateTime> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function13<? super Integer, ? super String, ? super String, ? super Year, ? super Integer, ? super Integer, ? super Byte, ? super BigDecimal, ? super Short, ? super BigDecimal, ? super FilmRating, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function13<? super Integer, ? super String, ? super String, ? super Year, ? super Integer, ? super Integer, ? super Byte, ? super BigDecimal, ? super Short, ? super BigDecimal, ? super FilmRating, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
