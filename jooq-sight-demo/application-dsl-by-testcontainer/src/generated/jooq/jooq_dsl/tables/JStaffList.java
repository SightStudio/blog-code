/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables;


import java.util.function.Function;

import jooq.jooq_dsl.JSakila;
import jooq.jooq_dsl.tables.records.JStaffListRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function8;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JStaffList extends TableImpl<JStaffListRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>sakila.staff_list</code>
     */
    public static final JStaffList STAFF_LIST = new JStaffList();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JStaffListRecord> getRecordType() {
        return JStaffListRecord.class;
    }

    /**
     * The column <code>sakila.staff_list.ID</code>.
     */
    public final TableField<JStaffListRecord, Integer> ID = createField(DSL.name("ID"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>sakila.staff_list.name</code>.
     */
    public final TableField<JStaffListRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(91), this, "");

    /**
     * The column <code>sakila.staff_list.address</code>.
     */
    public final TableField<JStaffListRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>sakila.staff_list.zip code</code>.
     */
    public final TableField<JStaffListRecord, String> ZIP_CODE = createField(DSL.name("zip code"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>sakila.staff_list.phone</code>.
     */
    public final TableField<JStaffListRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(20).nullable(false), this, "");

    /**
     * The column <code>sakila.staff_list.city</code>.
     */
    public final TableField<JStaffListRecord, String> CITY = createField(DSL.name("city"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>sakila.staff_list.country</code>.
     */
    public final TableField<JStaffListRecord, String> COUNTRY = createField(DSL.name("country"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>sakila.staff_list.SID</code>.
     */
    public final TableField<JStaffListRecord, Integer> SID = createField(DSL.name("SID"), SQLDataType.INTEGER.nullable(false), this, "");

    private JStaffList(Name alias, Table<JStaffListRecord> aliased) {
        this(alias, aliased, null);
    }

    private JStaffList(Name alias, Table<JStaffListRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `staff_list` as select `s`.`staff_id` AS `ID`,concat(`s`.`first_name`,' ',`s`.`last_name`) AS `name`,`a`.`address` AS `address`,`a`.`postal_code` AS `zip code`,`a`.`phone` AS `phone`,`sakila`.`city`.`city` AS `city`,`sakila`.`country`.`country` AS `country`,`s`.`store_id` AS `SID` from (((`sakila`.`staff` `s` join `sakila`.`address` `a` on((`s`.`address_id` = `a`.`address_id`))) join `sakila`.`city` on((`a`.`city_id` = `sakila`.`city`.`city_id`))) join `sakila`.`country` on((`sakila`.`city`.`country_id` = `sakila`.`country`.`country_id`)))"));
    }

    /**
     * Create an aliased <code>sakila.staff_list</code> table reference
     */
    public JStaffList(String alias) {
        this(DSL.name(alias), STAFF_LIST);
    }

    /**
     * Create an aliased <code>sakila.staff_list</code> table reference
     */
    public JStaffList(Name alias) {
        this(alias, STAFF_LIST);
    }

    /**
     * Create a <code>sakila.staff_list</code> table reference
     */
    public JStaffList() {
        this(DSL.name("staff_list"), null);
    }

    public <O extends Record> JStaffList(Table<O> child, ForeignKey<O, JStaffListRecord> key) {
        super(child, key, STAFF_LIST);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : JSakila.SAKILA;
    }

    @Override
    public JStaffList as(String alias) {
        return new JStaffList(DSL.name(alias), this);
    }

    @Override
    public JStaffList as(Name alias) {
        return new JStaffList(alias, this);
    }

    @Override
    public JStaffList as(Table<?> alias) {
        return new JStaffList(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JStaffList rename(String name) {
        return new JStaffList(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JStaffList rename(Name name) {
        return new JStaffList(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JStaffList rename(Table<?> name) {
        return new JStaffList(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, String, String, String, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function8<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function8<? super Integer, ? super String, ? super String, ? super String, ? super String, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
