/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import jooq.jooq_dsl.AbstractSpringDAOImpl;
import jooq.jooq_dsl.tables.JActor;
import jooq.jooq_dsl.tables.records.JActorRecord;

import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class ActorDao extends AbstractSpringDAOImpl<JActorRecord, jooq.jooq_dsl.tables.pojos.JActor, Integer> {

    /**
     * Create a new ActorDao without any configuration
     */
    public ActorDao() {
        super(JActor.ACTOR, jooq.jooq_dsl.tables.pojos.JActor.class);
    }

    /**
     * Create a new ActorDao with an attached configuration
     */
    @Autowired
    public ActorDao(Configuration configuration) {
        super(JActor.ACTOR, jooq.jooq_dsl.tables.pojos.JActor.class, configuration);
    }

    @Override
    public Integer getId(jooq.jooq_dsl.tables.pojos.JActor object) {
        return object.getActorId();
    }

    /**
     * Fetch records that have <code>actor_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JActor> fetchRangeOfJActorId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JActor.ACTOR.ACTOR_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>actor_id IN (values)</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JActor> fetchByJActorId(Integer... values) {
        return fetch(JActor.ACTOR.ACTOR_ID, values);
    }

    /**
     * Fetch a unique record that has <code>actor_id = value</code>
     */
    public jooq.jooq_dsl.tables.pojos.JActor fetchOneByJActorId(Integer value) {
        return fetchOne(JActor.ACTOR.ACTOR_ID, value);
    }

    /**
     * Fetch a unique record that has <code>actor_id = value</code>
     */
    public Optional<jooq.jooq_dsl.tables.pojos.JActor> fetchOptionalByJActorId(Integer value) {
        return fetchOptional(JActor.ACTOR.ACTOR_ID, value);
    }

    /**
     * Fetch records that have <code>first_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JActor> fetchRangeOfJFirstName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JActor.ACTOR.FIRST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>first_name IN (values)</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JActor> fetchByJFirstName(String... values) {
        return fetch(JActor.ACTOR.FIRST_NAME, values);
    }

    /**
     * Fetch records that have <code>last_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JActor> fetchRangeOfJLastName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JActor.ACTOR.LAST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_name IN (values)</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JActor> fetchByJLastName(String... values) {
        return fetch(JActor.ACTOR.LAST_NAME, values);
    }

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JActor> fetchRangeOfJLastUpdate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JActor.ACTOR.LAST_UPDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JActor> fetchByJLastUpdate(LocalDateTime... values) {
        return fetch(JActor.ACTOR.LAST_UPDATE, values);
    }
}
