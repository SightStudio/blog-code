/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import jooq.jooq_dsl.AbstractSpringDAOImpl;
import jooq.jooq_dsl.tables.JCategory;
import jooq.jooq_dsl.tables.records.JCategoryRecord;

import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class CategoryDao extends AbstractSpringDAOImpl<JCategoryRecord, jooq.jooq_dsl.tables.pojos.JCategory, Integer> {

    /**
     * Create a new CategoryDao without any configuration
     */
    public CategoryDao() {
        super(JCategory.CATEGORY, jooq.jooq_dsl.tables.pojos.JCategory.class);
    }

    /**
     * Create a new CategoryDao with an attached configuration
     */
    @Autowired
    public CategoryDao(Configuration configuration) {
        super(JCategory.CATEGORY, jooq.jooq_dsl.tables.pojos.JCategory.class, configuration);
    }

    @Override
    public Integer getId(jooq.jooq_dsl.tables.pojos.JCategory object) {
        return object.getCategoryId();
    }

    /**
     * Fetch records that have <code>category_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JCategory> fetchRangeOfJCategoryId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JCategory.CATEGORY.CATEGORY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>category_id IN (values)</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JCategory> fetchByJCategoryId(Integer... values) {
        return fetch(JCategory.CATEGORY.CATEGORY_ID, values);
    }

    /**
     * Fetch a unique record that has <code>category_id = value</code>
     */
    public jooq.jooq_dsl.tables.pojos.JCategory fetchOneByJCategoryId(Integer value) {
        return fetchOne(JCategory.CATEGORY.CATEGORY_ID, value);
    }

    /**
     * Fetch a unique record that has <code>category_id = value</code>
     */
    public Optional<jooq.jooq_dsl.tables.pojos.JCategory> fetchOptionalByJCategoryId(Integer value) {
        return fetchOptional(JCategory.CATEGORY.CATEGORY_ID, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JCategory> fetchRangeOfJName(String lowerInclusive, String upperInclusive) {
        return fetchRange(JCategory.CATEGORY.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JCategory> fetchByJName(String... values) {
        return fetch(JCategory.CATEGORY.NAME, values);
    }

    /**
     * Fetch records that have <code>last_update BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JCategory> fetchRangeOfJLastUpdate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JCategory.CATEGORY.LAST_UPDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_update IN (values)</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JCategory> fetchByJLastUpdate(LocalDateTime... values) {
        return fetch(JCategory.CATEGORY.LAST_UPDATE, values);
    }
}
