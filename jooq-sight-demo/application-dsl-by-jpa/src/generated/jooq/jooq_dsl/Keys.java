/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl;


import jooq.jooq_dsl.tables.JActor;
import jooq.jooq_dsl.tables.JAddress;
import jooq.jooq_dsl.tables.JCategory;
import jooq.jooq_dsl.tables.JCity;
import jooq.jooq_dsl.tables.JCountry;
import jooq.jooq_dsl.tables.JCustomer;
import jooq.jooq_dsl.tables.JFilm;
import jooq.jooq_dsl.tables.JFilmactor;
import jooq.jooq_dsl.tables.JFilmcategory;
import jooq.jooq_dsl.tables.JFilmtext;
import jooq.jooq_dsl.tables.JInventory;
import jooq.jooq_dsl.tables.JLanguage;
import jooq.jooq_dsl.tables.JPayment;
import jooq.jooq_dsl.tables.JRental;
import jooq.jooq_dsl.tables.JStaff;
import jooq.jooq_dsl.tables.JStore;
import jooq.jooq_dsl.tables.records.JActorRecord;
import jooq.jooq_dsl.tables.records.JAddressRecord;
import jooq.jooq_dsl.tables.records.JCategoryRecord;
import jooq.jooq_dsl.tables.records.JCityRecord;
import jooq.jooq_dsl.tables.records.JCountryRecord;
import jooq.jooq_dsl.tables.records.JCustomerRecord;
import jooq.jooq_dsl.tables.records.JFilmRecord;
import jooq.jooq_dsl.tables.records.JFilmactorRecord;
import jooq.jooq_dsl.tables.records.JFilmcategoryRecord;
import jooq.jooq_dsl.tables.records.JFilmtextRecord;
import jooq.jooq_dsl.tables.records.JInventoryRecord;
import jooq.jooq_dsl.tables.records.JLanguageRecord;
import jooq.jooq_dsl.tables.records.JPaymentRecord;
import jooq.jooq_dsl.tables.records.JRentalRecord;
import jooq.jooq_dsl.tables.records.JStaffRecord;
import jooq.jooq_dsl.tables.records.JStoreRecord;

import org.jooq.ForeignKey;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables in the
 * default schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<JActorRecord> CONSTRAINT_3 = Internal.createUniqueKey(JActor.ACTOR, DSL.name("CONSTRAINT_3"), new TableField[] { JActor.ACTOR.ACTORID }, true);
    public static final UniqueKey<JAddressRecord> CONSTRAINT_1 = Internal.createUniqueKey(JAddress.ADDRESS, DSL.name("CONSTRAINT_1"), new TableField[] { JAddress.ADDRESS.ADDRESSID }, true);
    public static final UniqueKey<JCategoryRecord> CONSTRAINT_6 = Internal.createUniqueKey(JCategory.CATEGORY, DSL.name("CONSTRAINT_6"), new TableField[] { JCategory.CATEGORY.CATEGORYID }, true);
    public static final UniqueKey<JCityRecord> CONSTRAINT_2 = Internal.createUniqueKey(JCity.CITY, DSL.name("CONSTRAINT_2"), new TableField[] { JCity.CITY.CITYID }, true);
    public static final UniqueKey<JCountryRecord> CONSTRAINT_9 = Internal.createUniqueKey(JCountry.COUNTRY, DSL.name("CONSTRAINT_9"), new TableField[] { JCountry.COUNTRY.COUNTRYID }, true);
    public static final UniqueKey<JCustomerRecord> CONSTRAINT_27 = Internal.createUniqueKey(JCustomer.CUSTOMER, DSL.name("CONSTRAINT_27"), new TableField[] { JCustomer.CUSTOMER.CUSTOMERID }, true);
    public static final UniqueKey<JFilmRecord> CONSTRAINT_21 = Internal.createUniqueKey(JFilm.FILM, DSL.name("CONSTRAINT_21"), new TableField[] { JFilm.FILM.FILMID }, true);
    public static final UniqueKey<JFilmactorRecord> CONSTRAINT_34 = Internal.createUniqueKey(JFilmactor.FILMACTOR, DSL.name("CONSTRAINT_34"), new TableField[] { JFilmactor.FILMACTOR.ID }, true);
    public static final UniqueKey<JFilmcategoryRecord> CONSTRAINT_63 = Internal.createUniqueKey(JFilmcategory.FILMCATEGORY, DSL.name("CONSTRAINT_63"), new TableField[] { JFilmcategory.FILMCATEGORY.ID }, true);
    public static final UniqueKey<JFilmtextRecord> CONSTRAINT_D = Internal.createUniqueKey(JFilmtext.FILMTEXT, DSL.name("CONSTRAINT_D"), new TableField[] { JFilmtext.FILMTEXT.FILMID }, true);
    public static final UniqueKey<JInventoryRecord> CONSTRAINT_F = Internal.createUniqueKey(JInventory.INVENTORY, DSL.name("CONSTRAINT_F"), new TableField[] { JInventory.INVENTORY.INVENTORYID }, true);
    public static final UniqueKey<JLanguageRecord> CONSTRAINT_A = Internal.createUniqueKey(JLanguage.LANGUAGE, DSL.name("CONSTRAINT_A"), new TableField[] { JLanguage.LANGUAGE.LANGUAGEID }, true);
    public static final UniqueKey<JPaymentRecord> CONSTRAINT_345 = Internal.createUniqueKey(JPayment.PAYMENT, DSL.name("CONSTRAINT_345"), new TableField[] { JPayment.PAYMENT.PAYMENTID }, true);
    public static final UniqueKey<JRentalRecord> CONSTRAINT_91 = Internal.createUniqueKey(JRental.RENTAL, DSL.name("CONSTRAINT_91"), new TableField[] { JRental.RENTAL.RENTALID }, true);
    public static final UniqueKey<JStaffRecord> CONSTRAINT_4 = Internal.createUniqueKey(JStaff.STAFF, DSL.name("CONSTRAINT_4"), new TableField[] { JStaff.STAFF.STAFFID }, true);
    public static final UniqueKey<JStoreRecord> CONSTRAINT_4C = Internal.createUniqueKey(JStore.STORE, DSL.name("CONSTRAINT_4C"), new TableField[] { JStore.STORE.STOREID }, true);

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<JAddressRecord, JCityRecord> FKB89UC4PTH86KLU3RGRE7M2ECK = Internal.createForeignKey(JAddress.ADDRESS, DSL.name("FKB89UC4PTH86KLU3RGRE7M2ECK"), new TableField[] { JAddress.ADDRESS.CITY_ID }, Keys.CONSTRAINT_2, new TableField[] { JCity.CITY.CITYID }, true);
    public static final ForeignKey<JCityRecord, JCountryRecord> FKMWHJDHDLRHXTFS13HPTE57AS7 = Internal.createForeignKey(JCity.CITY, DSL.name("FKMWHJDHDLRHXTFS13HPTE57AS7"), new TableField[] { JCity.CITY.COUNTRY_ID }, Keys.CONSTRAINT_9, new TableField[] { JCountry.COUNTRY.COUNTRYID }, true);
    public static final ForeignKey<JCustomerRecord, JStoreRecord> FKESADLYXOTDUX9A7AWCJEL7WJM = Internal.createForeignKey(JCustomer.CUSTOMER, DSL.name("FKESADLYXOTDUX9A7AWCJEL7WJM"), new TableField[] { JCustomer.CUSTOMER.STORE_ID }, Keys.CONSTRAINT_4C, new TableField[] { JStore.STORE.STOREID }, true);
    public static final ForeignKey<JCustomerRecord, JAddressRecord> FKF5TCLRJSN1PUPXXXFSMDGI2HK = Internal.createForeignKey(JCustomer.CUSTOMER, DSL.name("FKF5TCLRJSN1PUPXXXFSMDGI2HK"), new TableField[] { JCustomer.CUSTOMER.ADDRESS_ID }, Keys.CONSTRAINT_1, new TableField[] { JAddress.ADDRESS.ADDRESSID }, true);
    public static final ForeignKey<JFilmRecord, JLanguageRecord> FKJG7IH3PN96LLO7NL8Y5WIXDU8 = Internal.createForeignKey(JFilm.FILM, DSL.name("FKJG7IH3PN96LLO7NL8Y5WIXDU8"), new TableField[] { JFilm.FILM.LANGUAGE_ID }, Keys.CONSTRAINT_A, new TableField[] { JLanguage.LANGUAGE.LANGUAGEID }, true);
    public static final ForeignKey<JFilmRecord, JLanguageRecord> FKN0C4T5N7YRWMBL7RU97B1L73E = Internal.createForeignKey(JFilm.FILM, DSL.name("FKN0C4T5N7YRWMBL7RU97B1L73E"), new TableField[] { JFilm.FILM.ORIGINAL_LANGUAGE_ID }, Keys.CONSTRAINT_A, new TableField[] { JLanguage.LANGUAGE.LANGUAGEID }, true);
    public static final ForeignKey<JFilmactorRecord, JFilmRecord> FK5IFUSA27CR9P4UBNDWWAEE0KB = Internal.createForeignKey(JFilmactor.FILMACTOR, DSL.name("FK5IFUSA27CR9P4UBNDWWAEE0KB"), new TableField[] { JFilmactor.FILMACTOR.FILM_ID }, Keys.CONSTRAINT_21, new TableField[] { JFilm.FILM.FILMID }, true);
    public static final ForeignKey<JFilmactorRecord, JActorRecord> FKGC9OQ44FBIUDOR7IIJU3Y6ADM = Internal.createForeignKey(JFilmactor.FILMACTOR, DSL.name("FKGC9OQ44FBIUDOR7IIJU3Y6ADM"), new TableField[] { JFilmactor.FILMACTOR.ACTOR_ID }, Keys.CONSTRAINT_3, new TableField[] { JActor.ACTOR.ACTORID }, true);
    public static final ForeignKey<JFilmcategoryRecord, JCategoryRecord> FKJK3TDWWWHJ833O3NQ0F5OFMEP = Internal.createForeignKey(JFilmcategory.FILMCATEGORY, DSL.name("FKJK3TDWWWHJ833O3NQ0F5OFMEP"), new TableField[] { JFilmcategory.FILMCATEGORY.CATEGORY_ID }, Keys.CONSTRAINT_6, new TableField[] { JCategory.CATEGORY.CATEGORYID }, true);
    public static final ForeignKey<JFilmcategoryRecord, JFilmRecord> FKNGO8GOL47X0GQ3X32IQ9MV6DJ = Internal.createForeignKey(JFilmcategory.FILMCATEGORY, DSL.name("FKNGO8GOL47X0GQ3X32IQ9MV6DJ"), new TableField[] { JFilmcategory.FILMCATEGORY.FILM_ID }, Keys.CONSTRAINT_21, new TableField[] { JFilm.FILM.FILMID }, true);
    public static final ForeignKey<JInventoryRecord, JStoreRecord> FKE1LUIVA6SVX909VN2ORATF32L = Internal.createForeignKey(JInventory.INVENTORY, DSL.name("FKE1LUIVA6SVX909VN2ORATF32L"), new TableField[] { JInventory.INVENTORY.STORE_ID }, Keys.CONSTRAINT_4C, new TableField[] { JStore.STORE.STOREID }, true);
    public static final ForeignKey<JInventoryRecord, JFilmRecord> FKL67WNIJL59E9AELUJ5FCOTJ9A = Internal.createForeignKey(JInventory.INVENTORY, DSL.name("FKL67WNIJL59E9AELUJ5FCOTJ9A"), new TableField[] { JInventory.INVENTORY.FILM_ID }, Keys.CONSTRAINT_21, new TableField[] { JFilm.FILM.FILMID }, true);
    public static final ForeignKey<JPaymentRecord, JStaffRecord> FK6FAABVA3H5HNQCM0IQ020EV34 = Internal.createForeignKey(JPayment.PAYMENT, DSL.name("FK6FAABVA3H5HNQCM0IQ020EV34"), new TableField[] { JPayment.PAYMENT.STAFF_ID }, Keys.CONSTRAINT_4, new TableField[] { JStaff.STAFF.STAFFID }, true);
    public static final ForeignKey<JPaymentRecord, JCustomerRecord> FKO87BXHL8ENKM9D5SRSTJ8IG82 = Internal.createForeignKey(JPayment.PAYMENT, DSL.name("FKO87BXHL8ENKM9D5SRSTJ8IG82"), new TableField[] { JPayment.PAYMENT.CUSTOMER_ID }, Keys.CONSTRAINT_27, new TableField[] { JCustomer.CUSTOMER.CUSTOMERID }, true);
    public static final ForeignKey<JPaymentRecord, JRentalRecord> FKRV0BTPP6RB3C2DFJ2G350PO1G = Internal.createForeignKey(JPayment.PAYMENT, DSL.name("FKRV0BTPP6RB3C2DFJ2G350PO1G"), new TableField[] { JPayment.PAYMENT.RENTAL_ID }, Keys.CONSTRAINT_91, new TableField[] { JRental.RENTAL.RENTALID }, true);
    public static final ForeignKey<JRentalRecord, JCustomerRecord> FK1X3K7EEDU0FWARN04KP5IEHDX = Internal.createForeignKey(JRental.RENTAL, DSL.name("FK1X3K7EEDU0FWARN04KP5IEHDX"), new TableField[] { JRental.RENTAL.CUSTOMER_ID }, Keys.CONSTRAINT_27, new TableField[] { JCustomer.CUSTOMER.CUSTOMERID }, true);
    public static final ForeignKey<JRentalRecord, JStaffRecord> FKIEJUJX39DSL0VMFY3NBAO1603 = Internal.createForeignKey(JRental.RENTAL, DSL.name("FKIEJUJX39DSL0VMFY3NBAO1603"), new TableField[] { JRental.RENTAL.STAFF_ID }, Keys.CONSTRAINT_4, new TableField[] { JStaff.STAFF.STAFFID }, true);
    public static final ForeignKey<JRentalRecord, JInventoryRecord> FKSTGKQENBJBAUHXMSXINVBKM1B = Internal.createForeignKey(JRental.RENTAL, DSL.name("FKSTGKQENBJBAUHXMSXINVBKM1B"), new TableField[] { JRental.RENTAL.INVENTORY_ID }, Keys.CONSTRAINT_F, new TableField[] { JInventory.INVENTORY.INVENTORYID }, true);
    public static final ForeignKey<JStaffRecord, JAddressRecord> FK77S643WTYQVYF8FR94S7CDG4Y = Internal.createForeignKey(JStaff.STAFF, DSL.name("FK77S643WTYQVYF8FR94S7CDG4Y"), new TableField[] { JStaff.STAFF.ADDRESS_ID }, Keys.CONSTRAINT_1, new TableField[] { JAddress.ADDRESS.ADDRESSID }, true);
    public static final ForeignKey<JStaffRecord, JStoreRecord> FKLP23E96799F77M0QL42NXUJ5G = Internal.createForeignKey(JStaff.STAFF, DSL.name("FKLP23E96799F77M0QL42NXUJ5G"), new TableField[] { JStaff.STAFF.STORE_ID }, Keys.CONSTRAINT_4C, new TableField[] { JStore.STORE.STOREID }, true);
    public static final ForeignKey<JStoreRecord, JAddressRecord> FK1U30WQ6FJM3TRHXIH98K8THEH = Internal.createForeignKey(JStore.STORE, DSL.name("FK1U30WQ6FJM3TRHXIH98K8THEH"), new TableField[] { JStore.STORE.ADDRESS_ID }, Keys.CONSTRAINT_1, new TableField[] { JAddress.ADDRESS.ADDRESSID }, true);
    public static final ForeignKey<JStoreRecord, JStaffRecord> FK7PERKXQJ3MDYTMGT8RILAMH5O = Internal.createForeignKey(JStore.STORE, DSL.name("FK7PERKXQJ3MDYTMGT8RILAMH5O"), new TableField[] { JStore.STORE.MANAGER_STAFF_ID }, Keys.CONSTRAINT_4, new TableField[] { JStaff.STAFF.STAFFID }, true);
}
