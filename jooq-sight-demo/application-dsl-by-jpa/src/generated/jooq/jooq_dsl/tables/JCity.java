/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooq.jooq_dsl.DefaultSchema;
import jooq.jooq_dsl.Keys;
import jooq.jooq_dsl.tables.records.JCityRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JCity extends TableImpl<JCityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>City</code>
     */
    public static final JCity CITY = new JCity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JCityRecord> getRecordType() {
        return JCityRecord.class;
    }

    /**
     * The column <code>City.cityId</code>.
     */
    public final TableField<JCityRecord, Integer> CITYID = createField(DSL.name("cityId"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>City.city</code>.
     */
    public final TableField<JCityRecord, String> CITY_ = createField(DSL.name("city"), SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>City.lastUpdate</code>.
     */
    public final TableField<JCityRecord, LocalDateTime> LASTUPDATE = createField(DSL.name("lastUpdate"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>City.country_id</code>.
     */
    public final TableField<JCityRecord, Integer> COUNTRY_ID = createField(DSL.name("country_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private JCity(Name alias, Table<JCityRecord> aliased) {
        this(alias, aliased, null);
    }

    private JCity(Name alias, Table<JCityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>City</code> table reference
     */
    public JCity(String alias) {
        this(DSL.name(alias), CITY);
    }

    /**
     * Create an aliased <code>City</code> table reference
     */
    public JCity(Name alias) {
        this(alias, CITY);
    }

    /**
     * Create a <code>City</code> table reference
     */
    public JCity() {
        this(DSL.name("City"), null);
    }

    public <O extends Record> JCity(Table<O> child, ForeignKey<O, JCityRecord> key) {
        super(child, key, CITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<JCityRecord, Integer> getIdentity() {
        return (Identity<JCityRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<JCityRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_2;
    }

    @Override
    public List<ForeignKey<JCityRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKMWHJDHDLRHXTFS13HPTE57AS7);
    }

    private transient JCountry _country;

    /**
     * Get the implicit join path to the <code>PUBLIC.Country</code> table.
     */
    public JCountry country() {
        if (_country == null)
            _country = new JCountry(this, Keys.FKMWHJDHDLRHXTFS13HPTE57AS7);

        return _country;
    }

    @Override
    public JCity as(String alias) {
        return new JCity(DSL.name(alias), this);
    }

    @Override
    public JCity as(Name alias) {
        return new JCity(alias, this);
    }

    @Override
    public JCity as(Table<?> alias) {
        return new JCity(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JCity rename(String name) {
        return new JCity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JCity rename(Name name) {
        return new JCity(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JCity rename(Table<?> name) {
        return new JCity(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, LocalDateTime, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super LocalDateTime, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
