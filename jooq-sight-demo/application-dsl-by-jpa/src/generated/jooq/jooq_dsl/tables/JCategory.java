/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables;


import java.time.LocalDateTime;
import java.util.function.Function;

import jooq.jooq_dsl.DefaultSchema;
import jooq.jooq_dsl.Keys;
import jooq.jooq_dsl.tables.records.JCategoryRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JCategory extends TableImpl<JCategoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Category</code>
     */
    public static final JCategory CATEGORY = new JCategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JCategoryRecord> getRecordType() {
        return JCategoryRecord.class;
    }

    /**
     * The column <code>Category.categoryId</code>.
     */
    public final TableField<JCategoryRecord, Integer> CATEGORYID = createField(DSL.name("categoryId"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Category.lastUpdate</code>.
     */
    public final TableField<JCategoryRecord, LocalDateTime> LASTUPDATE = createField(DSL.name("lastUpdate"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>Category.name</code>.
     */
    public final TableField<JCategoryRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(25).nullable(false), this, "");

    private JCategory(Name alias, Table<JCategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private JCategory(Name alias, Table<JCategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>Category</code> table reference
     */
    public JCategory(String alias) {
        this(DSL.name(alias), CATEGORY);
    }

    /**
     * Create an aliased <code>Category</code> table reference
     */
    public JCategory(Name alias) {
        this(alias, CATEGORY);
    }

    /**
     * Create a <code>Category</code> table reference
     */
    public JCategory() {
        this(DSL.name("Category"), null);
    }

    public <O extends Record> JCategory(Table<O> child, ForeignKey<O, JCategoryRecord> key) {
        super(child, key, CATEGORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<JCategoryRecord, Integer> getIdentity() {
        return (Identity<JCategoryRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<JCategoryRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_6;
    }

    @Override
    public JCategory as(String alias) {
        return new JCategory(DSL.name(alias), this);
    }

    @Override
    public JCategory as(Name alias) {
        return new JCategory(alias, this);
    }

    @Override
    public JCategory as(Table<?> alias) {
        return new JCategory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JCategory rename(String name) {
        return new JCategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JCategory rename(Name name) {
        return new JCategory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JCategory rename(Table<?> name) {
        return new JCategory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, LocalDateTime, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super LocalDateTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
