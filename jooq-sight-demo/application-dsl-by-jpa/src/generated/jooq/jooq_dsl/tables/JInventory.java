/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooq.jooq_dsl.DefaultSchema;
import jooq.jooq_dsl.Keys;
import jooq.jooq_dsl.tables.records.JInventoryRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JInventory extends TableImpl<JInventoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Inventory</code>
     */
    public static final JInventory INVENTORY = new JInventory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JInventoryRecord> getRecordType() {
        return JInventoryRecord.class;
    }

    /**
     * The column <code>Inventory.inventoryId</code>.
     */
    public final TableField<JInventoryRecord, Integer> INVENTORYID = createField(DSL.name("inventoryId"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Inventory.lastUpdate</code>.
     */
    public final TableField<JInventoryRecord, LocalDateTime> LASTUPDATE = createField(DSL.name("lastUpdate"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>Inventory.film_id</code>.
     */
    public final TableField<JInventoryRecord, Integer> FILM_ID = createField(DSL.name("film_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Inventory.store_id</code>.
     */
    public final TableField<JInventoryRecord, Integer> STORE_ID = createField(DSL.name("store_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private JInventory(Name alias, Table<JInventoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private JInventory(Name alias, Table<JInventoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>Inventory</code> table reference
     */
    public JInventory(String alias) {
        this(DSL.name(alias), INVENTORY);
    }

    /**
     * Create an aliased <code>Inventory</code> table reference
     */
    public JInventory(Name alias) {
        this(alias, INVENTORY);
    }

    /**
     * Create a <code>Inventory</code> table reference
     */
    public JInventory() {
        this(DSL.name("Inventory"), null);
    }

    public <O extends Record> JInventory(Table<O> child, ForeignKey<O, JInventoryRecord> key) {
        super(child, key, INVENTORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<JInventoryRecord, Integer> getIdentity() {
        return (Identity<JInventoryRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<JInventoryRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_F;
    }

    @Override
    public List<ForeignKey<JInventoryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKL67WNIJL59E9AELUJ5FCOTJ9A, Keys.FKE1LUIVA6SVX909VN2ORATF32L);
    }

    private transient JFilm _film;
    private transient JStore _store;

    /**
     * Get the implicit join path to the <code>PUBLIC.Film</code> table.
     */
    public JFilm film() {
        if (_film == null)
            _film = new JFilm(this, Keys.FKL67WNIJL59E9AELUJ5FCOTJ9A);

        return _film;
    }

    /**
     * Get the implicit join path to the <code>PUBLIC.Store</code> table.
     */
    public JStore store() {
        if (_store == null)
            _store = new JStore(this, Keys.FKE1LUIVA6SVX909VN2ORATF32L);

        return _store;
    }

    @Override
    public JInventory as(String alias) {
        return new JInventory(DSL.name(alias), this);
    }

    @Override
    public JInventory as(Name alias) {
        return new JInventory(alias, this);
    }

    @Override
    public JInventory as(Table<?> alias) {
        return new JInventory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JInventory rename(String name) {
        return new JInventory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JInventory rename(Name name) {
        return new JInventory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JInventory rename(Table<?> name) {
        return new JInventory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, LocalDateTime, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super LocalDateTime, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super LocalDateTime, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
