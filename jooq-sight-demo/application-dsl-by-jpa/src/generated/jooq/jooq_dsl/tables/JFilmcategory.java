/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooq.jooq_dsl.DefaultSchema;
import jooq.jooq_dsl.Keys;
import jooq.jooq_dsl.tables.records.JFilmcategoryRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JFilmcategory extends TableImpl<JFilmcategoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>FilmCategory</code>
     */
    public static final JFilmcategory FILMCATEGORY = new JFilmcategory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JFilmcategoryRecord> getRecordType() {
        return JFilmcategoryRecord.class;
    }

    /**
     * The column <code>FilmCategory.id</code>.
     */
    public final TableField<JFilmcategoryRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>FilmCategory.lastUpdate</code>.
     */
    public final TableField<JFilmcategoryRecord, LocalDateTime> LASTUPDATE = createField(DSL.name("lastUpdate"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>FilmCategory.category_id</code>.
     */
    public final TableField<JFilmcategoryRecord, Integer> CATEGORY_ID = createField(DSL.name("category_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>FilmCategory.film_id</code>.
     */
    public final TableField<JFilmcategoryRecord, Integer> FILM_ID = createField(DSL.name("film_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private JFilmcategory(Name alias, Table<JFilmcategoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private JFilmcategory(Name alias, Table<JFilmcategoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>FilmCategory</code> table reference
     */
    public JFilmcategory(String alias) {
        this(DSL.name(alias), FILMCATEGORY);
    }

    /**
     * Create an aliased <code>FilmCategory</code> table reference
     */
    public JFilmcategory(Name alias) {
        this(alias, FILMCATEGORY);
    }

    /**
     * Create a <code>FilmCategory</code> table reference
     */
    public JFilmcategory() {
        this(DSL.name("FilmCategory"), null);
    }

    public <O extends Record> JFilmcategory(Table<O> child, ForeignKey<O, JFilmcategoryRecord> key) {
        super(child, key, FILMCATEGORY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<JFilmcategoryRecord, Long> getIdentity() {
        return (Identity<JFilmcategoryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<JFilmcategoryRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_63;
    }

    @Override
    public List<ForeignKey<JFilmcategoryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKJK3TDWWWHJ833O3NQ0F5OFMEP, Keys.FKNGO8GOL47X0GQ3X32IQ9MV6DJ);
    }

    private transient JCategory _category;
    private transient JFilm _film;

    /**
     * Get the implicit join path to the <code>PUBLIC.Category</code> table.
     */
    public JCategory category() {
        if (_category == null)
            _category = new JCategory(this, Keys.FKJK3TDWWWHJ833O3NQ0F5OFMEP);

        return _category;
    }

    /**
     * Get the implicit join path to the <code>PUBLIC.Film</code> table.
     */
    public JFilm film() {
        if (_film == null)
            _film = new JFilm(this, Keys.FKNGO8GOL47X0GQ3X32IQ9MV6DJ);

        return _film;
    }

    @Override
    public JFilmcategory as(String alias) {
        return new JFilmcategory(DSL.name(alias), this);
    }

    @Override
    public JFilmcategory as(Name alias) {
        return new JFilmcategory(alias, this);
    }

    @Override
    public JFilmcategory as(Table<?> alias) {
        return new JFilmcategory(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JFilmcategory rename(String name) {
        return new JFilmcategory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JFilmcategory rename(Name name) {
        return new JFilmcategory(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JFilmcategory rename(Table<?> name) {
        return new JFilmcategory(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, LocalDateTime, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super LocalDateTime, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super LocalDateTime, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
