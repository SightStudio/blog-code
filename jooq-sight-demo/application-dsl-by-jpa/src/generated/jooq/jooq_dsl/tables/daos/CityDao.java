/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import jooq.jooq_dsl.AbstractSpringDAOImpl;
import jooq.jooq_dsl.tables.JCity;
import jooq.jooq_dsl.tables.records.JCityRecord;

import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class CityDao extends AbstractSpringDAOImpl<JCityRecord, jooq.jooq_dsl.tables.pojos.JCity, Integer> {

    /**
     * Create a new CityDao without any configuration
     */
    public CityDao() {
        super(JCity.CITY, jooq.jooq_dsl.tables.pojos.JCity.class);
    }

    /**
     * Create a new CityDao with an attached configuration
     */
    @Autowired
    public CityDao(Configuration configuration) {
        super(JCity.CITY, jooq.jooq_dsl.tables.pojos.JCity.class, configuration);
    }

    @Override
    public Integer getId(jooq.jooq_dsl.tables.pojos.JCity object) {
        return object.getCityid();
    }

    /**
     * Fetch records that have <code>cityId BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JCity> fetchRangeOfJCityid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JCity.CITY.CITYID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>cityId IN (values)</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JCity> fetchByJCityid(Integer... values) {
        return fetch(JCity.CITY.CITYID, values);
    }

    /**
     * Fetch a unique record that has <code>cityId = value</code>
     */
    public jooq.jooq_dsl.tables.pojos.JCity fetchOneByJCityid(Integer value) {
        return fetchOne(JCity.CITY.CITYID, value);
    }

    /**
     * Fetch a unique record that has <code>cityId = value</code>
     */
    public Optional<jooq.jooq_dsl.tables.pojos.JCity> fetchOptionalByJCityid(Integer value) {
        return fetchOptional(JCity.CITY.CITYID, value);
    }

    /**
     * Fetch records that have <code>city BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JCity> fetchRangeOfJCity(String lowerInclusive, String upperInclusive) {
        return fetchRange(JCity.CITY.CITY_, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>city IN (values)</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JCity> fetchByJCity(String... values) {
        return fetch(JCity.CITY.CITY_, values);
    }

    /**
     * Fetch records that have <code>lastUpdate BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JCity> fetchRangeOfJLastupdate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JCity.CITY.LASTUPDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>lastUpdate IN (values)</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JCity> fetchByJLastupdate(LocalDateTime... values) {
        return fetch(JCity.CITY.LASTUPDATE, values);
    }

    /**
     * Fetch records that have <code>country_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JCity> fetchRangeOfJCountryId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JCity.CITY.COUNTRY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>country_id IN (values)</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JCity> fetchByJCountryId(Integer... values) {
        return fetch(JCity.CITY.COUNTRY_ID, values);
    }
}
