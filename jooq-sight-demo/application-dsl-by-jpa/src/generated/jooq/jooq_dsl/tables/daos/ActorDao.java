/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import jooq.jooq_dsl.AbstractSpringDAOImpl;
import jooq.jooq_dsl.tables.JActor;
import jooq.jooq_dsl.tables.records.JActorRecord;

import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class ActorDao extends AbstractSpringDAOImpl<JActorRecord, jooq.jooq_dsl.tables.pojos.JActor, Integer> {

    /**
     * Create a new ActorDao without any configuration
     */
    public ActorDao() {
        super(JActor.ACTOR, jooq.jooq_dsl.tables.pojos.JActor.class);
    }

    /**
     * Create a new ActorDao with an attached configuration
     */
    @Autowired
    public ActorDao(Configuration configuration) {
        super(JActor.ACTOR, jooq.jooq_dsl.tables.pojos.JActor.class, configuration);
    }

    @Override
    public Integer getId(jooq.jooq_dsl.tables.pojos.JActor object) {
        return object.getActorid();
    }

    /**
     * Fetch records that have <code>actorId BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JActor> fetchRangeOfJActorid(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JActor.ACTOR.ACTORID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>actorId IN (values)</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JActor> fetchByJActorid(Integer... values) {
        return fetch(JActor.ACTOR.ACTORID, values);
    }

    /**
     * Fetch a unique record that has <code>actorId = value</code>
     */
    public jooq.jooq_dsl.tables.pojos.JActor fetchOneByJActorid(Integer value) {
        return fetchOne(JActor.ACTOR.ACTORID, value);
    }

    /**
     * Fetch a unique record that has <code>actorId = value</code>
     */
    public Optional<jooq.jooq_dsl.tables.pojos.JActor> fetchOptionalByJActorid(Integer value) {
        return fetchOptional(JActor.ACTOR.ACTORID, value);
    }

    /**
     * Fetch records that have <code>firstName BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JActor> fetchRangeOfJFirstname(String lowerInclusive, String upperInclusive) {
        return fetchRange(JActor.ACTOR.FIRSTNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>firstName IN (values)</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JActor> fetchByJFirstname(String... values) {
        return fetch(JActor.ACTOR.FIRSTNAME, values);
    }

    /**
     * Fetch records that have <code>lastName BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JActor> fetchRangeOfJLastname(String lowerInclusive, String upperInclusive) {
        return fetchRange(JActor.ACTOR.LASTNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>lastName IN (values)</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JActor> fetchByJLastname(String... values) {
        return fetch(JActor.ACTOR.LASTNAME, values);
    }

    /**
     * Fetch records that have <code>lastUpdate BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JActor> fetchRangeOfJLastupdate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JActor.ACTOR.LASTUPDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>lastUpdate IN (values)</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JActor> fetchByJLastupdate(LocalDateTime... values) {
        return fetch(JActor.ACTOR.LASTUPDATE, values);
    }
}
