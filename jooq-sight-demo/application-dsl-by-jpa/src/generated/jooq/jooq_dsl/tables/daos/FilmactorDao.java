/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables.daos;


import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import jooq.jooq_dsl.AbstractSpringDAOImpl;
import jooq.jooq_dsl.tables.JFilmactor;
import jooq.jooq_dsl.tables.records.JFilmactorRecord;

import org.jooq.Configuration;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class FilmactorDao extends AbstractSpringDAOImpl<JFilmactorRecord, jooq.jooq_dsl.tables.pojos.JFilmactor, Long> {

    /**
     * Create a new FilmactorDao without any configuration
     */
    public FilmactorDao() {
        super(JFilmactor.FILMACTOR, jooq.jooq_dsl.tables.pojos.JFilmactor.class);
    }

    /**
     * Create a new FilmactorDao with an attached configuration
     */
    @Autowired
    public FilmactorDao(Configuration configuration) {
        super(JFilmactor.FILMACTOR, jooq.jooq_dsl.tables.pojos.JFilmactor.class, configuration);
    }

    @Override
    public Long getId(jooq.jooq_dsl.tables.pojos.JFilmactor object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JFilmactor> fetchRangeOfJId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(JFilmactor.FILMACTOR.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JFilmactor> fetchByJId(Long... values) {
        return fetch(JFilmactor.FILMACTOR.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public jooq.jooq_dsl.tables.pojos.JFilmactor fetchOneByJId(Long value) {
        return fetchOne(JFilmactor.FILMACTOR.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<jooq.jooq_dsl.tables.pojos.JFilmactor> fetchOptionalByJId(Long value) {
        return fetchOptional(JFilmactor.FILMACTOR.ID, value);
    }

    /**
     * Fetch records that have <code>lastUpdate BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JFilmactor> fetchRangeOfJLastupdate(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(JFilmactor.FILMACTOR.LASTUPDATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>lastUpdate IN (values)</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JFilmactor> fetchByJLastupdate(LocalDateTime... values) {
        return fetch(JFilmactor.FILMACTOR.LASTUPDATE, values);
    }

    /**
     * Fetch records that have <code>actor_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JFilmactor> fetchRangeOfJActorId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JFilmactor.FILMACTOR.ACTOR_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>actor_id IN (values)</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JFilmactor> fetchByJActorId(Integer... values) {
        return fetch(JFilmactor.FILMACTOR.ACTOR_ID, values);
    }

    /**
     * Fetch records that have <code>film_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JFilmactor> fetchRangeOfJFilmId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(JFilmactor.FILMACTOR.FILM_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>film_id IN (values)</code>
     */
    public List<jooq.jooq_dsl.tables.pojos.JFilmactor> fetchByJFilmId(Integer... values) {
        return fetch(JFilmactor.FILMACTOR.FILM_ID, values);
    }
}
