/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables;


import java.time.LocalDateTime;
import java.util.function.Function;

import jooq.jooq_dsl.DefaultSchema;
import jooq.jooq_dsl.Keys;
import jooq.jooq_dsl.tables.records.JActorRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JActor extends TableImpl<JActorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Actor</code>
     */
    public static final JActor ACTOR = new JActor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JActorRecord> getRecordType() {
        return JActorRecord.class;
    }

    /**
     * The column <code>Actor.actorId</code>.
     */
    public final TableField<JActorRecord, Integer> ACTORID = createField(DSL.name("actorId"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Actor.firstName</code>.
     */
    public final TableField<JActorRecord, String> FIRSTNAME = createField(DSL.name("firstName"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>Actor.lastName</code>.
     */
    public final TableField<JActorRecord, String> LASTNAME = createField(DSL.name("lastName"), SQLDataType.VARCHAR(45).nullable(false), this, "");

    /**
     * The column <code>Actor.lastUpdate</code>.
     */
    public final TableField<JActorRecord, LocalDateTime> LASTUPDATE = createField(DSL.name("lastUpdate"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    private JActor(Name alias, Table<JActorRecord> aliased) {
        this(alias, aliased, null);
    }

    private JActor(Name alias, Table<JActorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>Actor</code> table reference
     */
    public JActor(String alias) {
        this(DSL.name(alias), ACTOR);
    }

    /**
     * Create an aliased <code>Actor</code> table reference
     */
    public JActor(Name alias) {
        this(alias, ACTOR);
    }

    /**
     * Create a <code>Actor</code> table reference
     */
    public JActor() {
        this(DSL.name("Actor"), null);
    }

    public <O extends Record> JActor(Table<O> child, ForeignKey<O, JActorRecord> key) {
        super(child, key, ACTOR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<JActorRecord, Integer> getIdentity() {
        return (Identity<JActorRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<JActorRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_3;
    }

    @Override
    public JActor as(String alias) {
        return new JActor(DSL.name(alias), this);
    }

    @Override
    public JActor as(Name alias) {
        return new JActor(alias, this);
    }

    @Override
    public JActor as(Table<?> alias) {
        return new JActor(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JActor rename(String name) {
        return new JActor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JActor rename(Name name) {
        return new JActor(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JActor rename(Table<?> name) {
        return new JActor(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super String, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
