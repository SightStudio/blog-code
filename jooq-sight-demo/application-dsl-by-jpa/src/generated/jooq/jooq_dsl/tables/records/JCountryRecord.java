/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables.records;


import java.time.LocalDateTime;

import jooq.jooq_dsl.tables.JCountry;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JCountryRecord extends UpdatableRecordImpl<JCountryRecord> implements Record3<Integer, String, LocalDateTime> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>Country.countryId</code>.
     */
    public JCountryRecord setCountryid(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>Country.countryId</code>.
     */
    public Integer getCountryid() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>Country.country</code>.
     */
    public JCountryRecord setCountry(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>Country.country</code>.
     */
    public String getCountry() {
        return (String) get(1);
    }

    /**
     * Setter for <code>Country.lastUpdate</code>.
     */
    public JCountryRecord setLastupdate(LocalDateTime value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>Country.lastUpdate</code>.
     */
    public LocalDateTime getLastupdate() {
        return (LocalDateTime) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, LocalDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, LocalDateTime> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return JCountry.COUNTRY.COUNTRYID;
    }

    @Override
    public Field<String> field2() {
        return JCountry.COUNTRY.COUNTRY_;
    }

    @Override
    public Field<LocalDateTime> field3() {
        return JCountry.COUNTRY.LASTUPDATE;
    }

    @Override
    public Integer component1() {
        return getCountryid();
    }

    @Override
    public String component2() {
        return getCountry();
    }

    @Override
    public LocalDateTime component3() {
        return getLastupdate();
    }

    @Override
    public Integer value1() {
        return getCountryid();
    }

    @Override
    public String value2() {
        return getCountry();
    }

    @Override
    public LocalDateTime value3() {
        return getLastupdate();
    }

    @Override
    public JCountryRecord value1(Integer value) {
        setCountryid(value);
        return this;
    }

    @Override
    public JCountryRecord value2(String value) {
        setCountry(value);
        return this;
    }

    @Override
    public JCountryRecord value3(LocalDateTime value) {
        setLastupdate(value);
        return this;
    }

    @Override
    public JCountryRecord values(Integer value1, String value2, LocalDateTime value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached JCountryRecord
     */
    public JCountryRecord() {
        super(JCountry.COUNTRY);
    }

    /**
     * Create a detached, initialised JCountryRecord
     */
    public JCountryRecord(Integer countryid, String country, LocalDateTime lastupdate) {
        super(JCountry.COUNTRY);

        setCountryid(countryid);
        setCountry(country);
        setLastupdate(lastupdate);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised JCountryRecord
     */
    public JCountryRecord(jooq.jooq_dsl.tables.pojos.JCountry value) {
        super(JCountry.COUNTRY);

        if (value != null) {
            setCountryid(value.getCountryid());
            setCountry(value.getCountry());
            setLastupdate(value.getLastupdate());
            resetChangedOnNotNull();
        }
    }
}
