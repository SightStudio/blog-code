/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooq.jooq_dsl.DefaultSchema;
import jooq.jooq_dsl.Keys;
import jooq.jooq_dsl.tables.records.JPaymentRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function7;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JPayment extends TableImpl<JPaymentRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Payment</code>
     */
    public static final JPayment PAYMENT = new JPayment();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JPaymentRecord> getRecordType() {
        return JPaymentRecord.class;
    }

    /**
     * The column <code>Payment.paymentId</code>.
     */
    public final TableField<JPaymentRecord, Integer> PAYMENTID = createField(DSL.name("paymentId"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Payment.amount</code>.
     */
    public final TableField<JPaymentRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.DECIMAL(7, 2).nullable(false), this, "");

    /**
     * The column <code>Payment.lastUpdate</code>.
     */
    public final TableField<JPaymentRecord, LocalDateTime> LASTUPDATE = createField(DSL.name("lastUpdate"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>Payment.paymentDate</code>.
     */
    public final TableField<JPaymentRecord, LocalDateTime> PAYMENTDATE = createField(DSL.name("paymentDate"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>Payment.customer_id</code>.
     */
    public final TableField<JPaymentRecord, Integer> CUSTOMER_ID = createField(DSL.name("customer_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Payment.rental_id</code>.
     */
    public final TableField<JPaymentRecord, Integer> RENTAL_ID = createField(DSL.name("rental_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Payment.staff_id</code>.
     */
    public final TableField<JPaymentRecord, Integer> STAFF_ID = createField(DSL.name("staff_id"), SQLDataType.INTEGER.nullable(false), this, "");

    private JPayment(Name alias, Table<JPaymentRecord> aliased) {
        this(alias, aliased, null);
    }

    private JPayment(Name alias, Table<JPaymentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>Payment</code> table reference
     */
    public JPayment(String alias) {
        this(DSL.name(alias), PAYMENT);
    }

    /**
     * Create an aliased <code>Payment</code> table reference
     */
    public JPayment(Name alias) {
        this(alias, PAYMENT);
    }

    /**
     * Create a <code>Payment</code> table reference
     */
    public JPayment() {
        this(DSL.name("Payment"), null);
    }

    public <O extends Record> JPayment(Table<O> child, ForeignKey<O, JPaymentRecord> key) {
        super(child, key, PAYMENT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<JPaymentRecord, Integer> getIdentity() {
        return (Identity<JPaymentRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<JPaymentRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_345;
    }

    @Override
    public List<ForeignKey<JPaymentRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKO87BXHL8ENKM9D5SRSTJ8IG82, Keys.FKRV0BTPP6RB3C2DFJ2G350PO1G, Keys.FK6FAABVA3H5HNQCM0IQ020EV34);
    }

    private transient JCustomer _customer;
    private transient JRental _rental;
    private transient JStaff _staff;

    /**
     * Get the implicit join path to the <code>PUBLIC.Customer</code> table.
     */
    public JCustomer customer() {
        if (_customer == null)
            _customer = new JCustomer(this, Keys.FKO87BXHL8ENKM9D5SRSTJ8IG82);

        return _customer;
    }

    /**
     * Get the implicit join path to the <code>PUBLIC.Rental</code> table.
     */
    public JRental rental() {
        if (_rental == null)
            _rental = new JRental(this, Keys.FKRV0BTPP6RB3C2DFJ2G350PO1G);

        return _rental;
    }

    /**
     * Get the implicit join path to the <code>PUBLIC.Staff</code> table.
     */
    public JStaff staff() {
        if (_staff == null)
            _staff = new JStaff(this, Keys.FK6FAABVA3H5HNQCM0IQ020EV34);

        return _staff;
    }

    @Override
    public JPayment as(String alias) {
        return new JPayment(DSL.name(alias), this);
    }

    @Override
    public JPayment as(Name alias) {
        return new JPayment(alias, this);
    }

    @Override
    public JPayment as(Table<?> alias) {
        return new JPayment(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JPayment rename(String name) {
        return new JPayment(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JPayment rename(Name name) {
        return new JPayment(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JPayment rename(Table<?> name) {
        return new JPayment(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, BigDecimal, LocalDateTime, LocalDateTime, Integer, Integer, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function7<? super Integer, ? super BigDecimal, ? super LocalDateTime, ? super LocalDateTime, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function7<? super Integer, ? super BigDecimal, ? super LocalDateTime, ? super LocalDateTime, ? super Integer, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
