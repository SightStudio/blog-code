/*
 * This file is generated by jOOQ.
 */
package jooq.jooq_dsl.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import jooq.jooq_dsl.DefaultSchema;
import jooq.jooq_dsl.Keys;
import jooq.jooq_dsl.tables.records.JFilmRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function13;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row13;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class JFilm extends TableImpl<JFilmRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>Film</code>
     */
    public static final JFilm FILM = new JFilm();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<JFilmRecord> getRecordType() {
        return JFilmRecord.class;
    }

    /**
     * The column <code>Film.filmId</code>.
     */
    public final TableField<JFilmRecord, Integer> FILMID = createField(DSL.name("filmId"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>Film.description</code>.
     */
    public final TableField<JFilmRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>Film.lastUpdate</code>.
     */
    public final TableField<JFilmRecord, LocalDateTime> LASTUPDATE = createField(DSL.name("lastUpdate"), SQLDataType.LOCALDATETIME(6).nullable(false), this, "");

    /**
     * The column <code>Film.length</code>.
     */
    public final TableField<JFilmRecord, Integer> LENGTH = createField(DSL.name("length"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Film.rating</code>.
     */
    public final TableField<JFilmRecord, String> RATING = createField(DSL.name("rating"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>Film.releaseYear</code>.
     */
    public final TableField<JFilmRecord, Integer> RELEASEYEAR = createField(DSL.name("releaseYear"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>Film.rentalDuration</code>.
     */
    public final TableField<JFilmRecord, Integer> RENTALDURATION = createField(DSL.name("rentalDuration"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Film.rentalRate</code>.
     */
    public final TableField<JFilmRecord, BigDecimal> RENTALRATE = createField(DSL.name("rentalRate"), SQLDataType.DECIMAL(6, 2).nullable(false), this, "");

    /**
     * The column <code>Film.replacementCost</code>.
     */
    public final TableField<JFilmRecord, BigDecimal> REPLACEMENTCOST = createField(DSL.name("replacementCost"), SQLDataType.DECIMAL(7, 2).nullable(false), this, "");

    /**
     * The column <code>Film.specialFeatures</code>.
     */
    public final TableField<JFilmRecord, String> SPECIALFEATURES = createField(DSL.name("specialFeatures"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>Film.title</code>.
     */
    public final TableField<JFilmRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>Film.language_id</code>.
     */
    public final TableField<JFilmRecord, Integer> LANGUAGE_ID = createField(DSL.name("language_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>Film.original_language_id</code>.
     */
    public final TableField<JFilmRecord, Integer> ORIGINAL_LANGUAGE_ID = createField(DSL.name("original_language_id"), SQLDataType.INTEGER, this, "");

    private JFilm(Name alias, Table<JFilmRecord> aliased) {
        this(alias, aliased, null);
    }

    private JFilm(Name alias, Table<JFilmRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>Film</code> table reference
     */
    public JFilm(String alias) {
        this(DSL.name(alias), FILM);
    }

    /**
     * Create an aliased <code>Film</code> table reference
     */
    public JFilm(Name alias) {
        this(alias, FILM);
    }

    /**
     * Create a <code>Film</code> table reference
     */
    public JFilm() {
        this(DSL.name("Film"), null);
    }

    public <O extends Record> JFilm(Table<O> child, ForeignKey<O, JFilmRecord> key) {
        super(child, key, FILM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<JFilmRecord, Integer> getIdentity() {
        return (Identity<JFilmRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<JFilmRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_21;
    }

    @Override
    public List<ForeignKey<JFilmRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FKJG7IH3PN96LLO7NL8Y5WIXDU8, Keys.FKN0C4T5N7YRWMBL7RU97B1L73E);
    }

    private transient JLanguage _fkjg7ih3pn96llo7nl8y5wixdu8;
    private transient JLanguage _fkn0c4t5n7yrwmbl7ru97b1l73e;

    /**
     * Get the implicit join path to the <code>PUBLIC.Language</code> table, via
     * the <code>FKJG7IH3PN96LLO7NL8Y5WIXDU8</code> key.
     */
    public JLanguage fkjg7ih3pn96llo7nl8y5wixdu8() {
        if (_fkjg7ih3pn96llo7nl8y5wixdu8 == null)
            _fkjg7ih3pn96llo7nl8y5wixdu8 = new JLanguage(this, Keys.FKJG7IH3PN96LLO7NL8Y5WIXDU8);

        return _fkjg7ih3pn96llo7nl8y5wixdu8;
    }

    /**
     * Get the implicit join path to the <code>PUBLIC.Language</code> table, via
     * the <code>FKN0C4T5N7YRWMBL7RU97B1L73E</code> key.
     */
    public JLanguage fkn0c4t5n7yrwmbl7ru97b1l73e() {
        if (_fkn0c4t5n7yrwmbl7ru97b1l73e == null)
            _fkn0c4t5n7yrwmbl7ru97b1l73e = new JLanguage(this, Keys.FKN0C4T5N7YRWMBL7RU97B1L73E);

        return _fkn0c4t5n7yrwmbl7ru97b1l73e;
    }

    @Override
    public JFilm as(String alias) {
        return new JFilm(DSL.name(alias), this);
    }

    @Override
    public JFilm as(Name alias) {
        return new JFilm(alias, this);
    }

    @Override
    public JFilm as(Table<?> alias) {
        return new JFilm(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public JFilm rename(String name) {
        return new JFilm(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public JFilm rename(Name name) {
        return new JFilm(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public JFilm rename(Table<?> name) {
        return new JFilm(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row13 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row13<Integer, String, LocalDateTime, Integer, String, Integer, Integer, BigDecimal, BigDecimal, String, String, Integer, Integer> fieldsRow() {
        return (Row13) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function13<? super Integer, ? super String, ? super LocalDateTime, ? super Integer, ? super String, ? super Integer, ? super Integer, ? super BigDecimal, ? super BigDecimal, ? super String, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function13<? super Integer, ? super String, ? super LocalDateTime, ? super Integer, ? super String, ? super Integer, ? super Integer, ? super BigDecimal, ? super BigDecimal, ? super String, ? super String, ? super Integer, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
